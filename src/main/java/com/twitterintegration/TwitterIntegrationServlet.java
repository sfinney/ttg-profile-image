package com.twitterintegration;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.net.URL;
import java.net.URLConnection;

import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.google.code.linkedinapi.client.LinkedInApiClient;
import com.google.code.linkedinapi.client.LinkedInApiClientFactory;
import com.google.code.linkedinapi.schema.Person;

import twitter4j.Twitter;
import twitter4j.TwitterException;
import twitter4j.TwitterFactory;
import twitter4j.User;
import twitter4j.auth.AccessToken;
import twitter4j.conf.Configuration;
import twitter4j.conf.ConfigurationBuilder;

public class TwitterIntegrationServlet extends HttpServlet {
	
	private static final String ACCESS_TOKEN = "2291204155-74hZw6tJATnOnGidwlLvMLMCuoI0hv1gHveRaab";
	private static final String ACCESS_TOKEN_SECRET = "4NL4979d3FQNTIzhsmsorkQ0MzaMhcUi4T9HeNTZhGFvS";
	
	private static final String CONSUMER_KEY = "hHKbEpoT86DcFwuvZ0B8JQ";
	private static final String CONSUMER_SECRET = "J2LhRTHWlVcVta7E7BFGvZNy0h6ZVcZGFf5d97R0ERI";
	
	// private static final String REQUEST_PARAMETER = "linkedInHandle";
	
	private static final String REQUEST_PARAMETER = "twitterHandle";
	
	private String handle;	
	private String profileImageURL;

	@Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		this.handle = request.getParameter(REQUEST_PARAMETER);
		
		// getLinkedInUserDetails();
		
        try {
        	getTwitterUserDetails();
        	
        } catch (TwitterException error) {
        	
        	// TODO Autogenerated catch block
        	error.printStackTrace();
        }
        
        ServletOutputStream output = response.getOutputStream();
        
        URL url = new URL(getProfileImageURL());        
        URLConnection urlConnection = url.openConnection();
        
        BufferedInputStream bufferedInputStream = new BufferedInputStream(urlConnection.getInputStream());        
        
        byte[] byteBuffer = new byte[1024];
        int inputStreamLength;
        
        while ((inputStreamLength = bufferedInputStream.read(byteBuffer)) > 0) {
        
        	output.write(byteBuffer, 0, inputStreamLength);
        }  
        
        output.flush();
        output.close();
    }
	
	private void getLinkedInUserDetails() {
		
		String apiKey = "7728b7mz21og75";
		String secretKey = "lsq6b6rSMQTX9ReG";
		
		String oAuthUserToken = "aaf71121-02b8-41b6-b049-d232e2222dd7";
		String oAuthUserSecret = "ab2bc414-5054-4f7d-a419-d1a1e82f0ff6";

		LinkedInApiClientFactory factory = LinkedInApiClientFactory.newInstance(apiKey, secretKey);
		LinkedInApiClient client = factory.createLinkedInApiClient(oAuthUserToken, oAuthUserSecret);
		
		Person person = client.getProfileById(handle);
		
		this.profileImageURL = person.getPictureUrl();		
	}
	
	private void getTwitterUserDetails() throws TwitterException {
		
		ConfigurationBuilder configurationBuilder = new ConfigurationBuilder();
		configurationBuilder.setOAuthConsumerKey(CONSUMER_KEY);
		configurationBuilder.setOAuthConsumerSecret(CONSUMER_SECRET);
		
		Configuration configuration = configurationBuilder.build();
		
		TwitterFactory factory = new TwitterFactory(configuration);
		Twitter twitter = factory.getInstance();
		
		AccessToken accessToken = new AccessToken(ACCESS_TOKEN, ACCESS_TOKEN_SECRET);
		
		twitter.setOAuthAccessToken(accessToken);
		
		User user = twitter.showUser(handle);		
		this.profileImageURL = user.getOriginalProfileImageURL();
	}
	
	private String getProfileImageURL() { return this.profileImageURL; }
}